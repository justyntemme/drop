image: docker:19.03.13

services:
  - docker:19.03.13-dind

  # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  
variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/nextwavedevs/drop

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - format
  - vet
  - build
  - deploy
# format:
#   stage: format
#   tags: 
#   - test
#   script:
#     - go fmt $(go list ./... | grep -v /vendor/)

#test:
  # stage: test
  # tags: 
  # - test
  # script:
  #   - go test -race $(go list ./... | grep -v /vendor/)
# vet:
#   stage: vet
#   tags: 
#   - test
#   script:
#     - go vet $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  tags: 
  - test
  script:
    - docker build $CI_PROJECT_DIR -t drop-api

deploy-test:
    stage: deploy
    tags:
    - test
    script:
    - docker run drop-api
